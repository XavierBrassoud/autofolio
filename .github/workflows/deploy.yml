# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - main
      - genesis

  pull_request:
    branches:
      - main
      - genesis

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy to:'
        type: environment
        required: true

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages (PRE-PRODUCTION)
permissions:
  contents: read
  pages: write
  id-token: write

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.125.4
      GOPRIVATE: github.com/XavierBrassoud/hugo-theme-vertica-resume
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb

      # - name: Install Dart Sass
      #   run: sudo snap install dart-sass

      - name: Install fonts
        run: >
          sudo apt install fonts-open-sans
          && mkdir ~/.fonts
          && wget -O ${{ runner.temp }}/font-awesome-4.7.0.zip https://fontawesome.com/v4/assets/font-awesome-4.7.0.zip
          && unzip ${{ runner.temp }}/font-awesome-4.7.0.zip
          && cp font-awesome-4.7.0/fonts/FontAwesome.otf ~/.fonts/
          && fc-cache -fv

      - name: Install LibreOffice
        run: sudo apt install libreoffice

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      # - name: Install Node.js dependencies
      #   run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      
      - name: Add SSH Go Module Private Key
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null	
          ssh-add - <<< "${{ secrets.VERTICA_PRIVATE_KEY }}"
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV        
  
      - name: Setup access for private go modules
        run: |
          git config --global url."ssh://git@github.com/".insteadOf https://github.com/        
  
      - name: Set build date
        run: echo "NOW=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV

      - name: Build with Hugo
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
          TZ: America/Los_Angeles
          BASE_URL: ${{ steps.pages.outputs.base_url }}/
          GIT_DATE: ${{ env.NOW }}
        run: .config/setup.sh

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .hugo/public

  # Deployment jobs
  # PRE-PRODUCTION
  deploy_pre_prod:
    # check only applied on manual trigger
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.environment == 'github-pages' }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
    # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
    concurrency:
      group: "pre-production"
      cancel-in-progress: false
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
  
  # PRODUCTION
  # This environemnt is restricted by following GitHub Environment rules:
  #   Required reviewers:
  #     * XavierBrassoud
  #   Deployment branches and tags:
  #     * main
  deploy_prod:
    # check only applied on manual trigger
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.environment == 'production' }}
    environment:
      name: production
      url: ${{ vars.BASE_URL }}
    # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
    # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
    concurrency:
      group: "production"
      cancel-in-progress: false
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Setup PROD
        run: echo "DEPLOY PROD"
